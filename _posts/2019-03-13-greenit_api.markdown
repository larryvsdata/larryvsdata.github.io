---
layout: post
title:      "Greenit API"
date:       2019-03-14 03:05:55 +0000
permalink:  greenit_api
---


Twitter is cool. However, Reddit offers some more variety just because it is topic based. Topics can be specified in Twitter using hashtags, but that is indirect and requires more effort to infer information out of it. Before, I had used Reddit data for a machine learning project that also included natural language processing. Reddit being topic based came in handy. In Greenit, my concern is just fullstack engineering.

For the backend, I used Rails paired with Postgresql. I scaffolded the models and serialized the data. It was so easy and trivial. However, I had to heavily modify the return json value to match my needs.

As for the models, a user may have many comments and replies. A topic has many comments and carry many replies through them. Common sense.

The main page is actually a component rendering out all the links to topics and descriptions of topics. Navigation bar sits on top of the page, bearing links to the about and contact pages. The form down at the bottom enables the user to open a new topic. I added photos to each topic just to mimic the real Reddit. Those photos don't pertain to anything, they are random placeholders.

Topic pages render out comments and replies associated with them. New comments can be added via the form at the bottom. Delete and reply options are also available through the relative bottons. Presently, all the comments and replies there are generated by the faker gem.

User pages are designed to provide the info about each user which would be comments and replies posted by that particular user. This feature is not available by Reddit.

In a nutshell, my Greenit API simulated the real Reddit forum well. I will keep adding new features to my API and pushing the code to Github.

Stay tuned.
